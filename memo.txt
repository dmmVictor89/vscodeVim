개발자 A: "작은 프로젝트에서 4개 파일만 자주 편집하는데, Harpoon으로 <leader>1~4만 누르면 끝. 퍼지 파인더보다 훨씬 빠름."
개발자 B: "서버 로그를 터미널에서 확인하면서 코드 수정해야 할 때, Harpoon으로 터미널과 파일 간 전환이 순식간."

Harpoon은 ThePrimeagen이 개발한 Neovim 플러그인으로, 빠르고 효율적인 파일 탐색 및 작업 흐름을 개선하기 위해 설계되었습니다. 아래에서 주요 기능과 장점을 설명드리겠습니다. 정보는 2025년 3월 20일 기준으로 GitHub 저장소(https://github.com/ThePrimeagen/harpoon)의 README 및 관련 문서를 기반으로 합니다.

주요 기능
Harpoon은 코드베이스에서 자주 사용하는 파일, 터미널, 명령어를 빠르게 탐색하고 관리할 수 있도록 돕습니다. 현재는 Harpoon 2(Harpoon2 브랜치)가 주력으로 개발되고 있으며, 아래 기능은 Harpoon 2를 기준으로 설명합니다.

파일 마킹 및 빠른 탐색
특정 파일을 "마크"로 지정하고, 단축키로 즉시 이동 가능.
예: <leader>1, <leader>2로 첫 번째, 두 번째 마크 파일로 이동.
동작: 파일 목록을 유지하며, :bnext, :bprev처럼 버퍼를 순환하거나 퍼지 파인더를 사용할 필요 없이 원하는 파일로 바로 점프.
동적 리스트 관리
파일을 리스트에 추가(:add)하거나 제거, 순서 변경 가능.
UI를 통해 리스트를 편집하거나 단축키로 동적으로 관리.
예: require("harpoon"):list():add()로 현재 파일 추가.
터미널 통합
여러 터미널 세션을 관리하고, 단축키로 전환 가능.
명령어를 터미널에 보내고 결과를 재탐색 가능(예: require("harpoon.term").sendCommand(1, "ls -la")).
tmux 지원: tmux 창으로 대체 가능(예: require("harpoon.tmux").gotoTerminal(1)).
커스텀 명령 실행
프로젝트별 명령어를 저장하고 실행.
예: require("harpoon.cmd-ui").toggle_quick_menu()로 명령 메뉴를 열어 실행.
프로젝트별 설정
각 프로젝트마다 고유한 마크와 터미널 설정을 저장.
Git 브랜치별로도 구분 가능(옵션 설정 시).
확장성
Lua 기반으로 커스터마이징 가능.
사용자 정의 리스트를 생성해 파일 외에도 원하는 데이터를 관리(예: 커스텀 스크립트 실행).

local harpoon = require("harpoon")
harpoon:setup()

-- 파일 추가
vim.keymap.set("n", "<leader>a", function() harpoon:list():add() end, { desc = "Add file to Harpoon" })

-- 메뉴 열기
vim.keymap.set("n", "<leader>h", function() harpoon.ui:toggle_quick_menu(harpoon:list()) end, { desc = "Harpoon menu" })

-- 1~5번 파일로 이동
for i = 1, 5 do
  vim.keymap.set("n", "<leader>" .. i, function() harpoon:list():select(i) end, { desc = "Go to file " .. i })
end

-- 터미널 이동
vim.keymap.set("n", "<leader>t1", function() harpoon:term():gotoTerminal(1) end, { desc = "Go to terminal 1" })